priority -30

global !p
texMathZones = [
	'texMathZone'+x for x in [
		'A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G',
		'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V',
		'W', 'X', 'Y', 'Z'
	]
]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
			i for i in reversed(synstackids)
			if i in texIgnoreMathZoneIds or i in texMathZoneIds
		)
		return first != ignore
	except StopIteration:
		return False
endglobal

# table {{{1 #
global !p
def create_tabu(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabu}to${1:.5}\linewidth{@{}" + "X[c]".join(['$' + str(i + 2) for i in range(cols + 1)]) + "@{}}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(2 + i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
		final_str += old_spacing + "\\end{tabu}$0"
		snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \n\\\\\\$"
	snip.expand_anon(final_str)

endglobal
#表格环境
#代码展开
pre_expand "create_tabu(snip)"
snippet "tb(\d+)x(\d+)" "myUltiSnips" r
endsnippet
pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet
snippet csv "myUltiSnips" b
\csvreader[
  head to column names,
  tabular=cc$1,
  table head=\toprule
  $2
  \midrule,
  table foot=\bottomrule
  late after line=\\\\
]{tab/$3.csv}{}{ \a&\b&\c&\d&\e&\f&\g&\h&\i&\j&\k&\l$3 }$0
endsnippet
snippet csvau "myUltiSnips" b
\csvauto${1:book}${2:t}${2/(t)$|(l)$|(.*)/(?1:abular)(?2:ongtable)/}{tab/$0.csv}
endsnippet
snippet timeline "myUltiSnips" b
\csvreader[
  head to column names,
  tabular = @{\,}r <{\hskip 2pt} !{\color{blue}\makebox[0pt]{\textbullet}\hskip-0.5pt\vrule width 1pt\hspace{\labelsep}} >{\raggedright\arraybackslash}p{5cm},
]{tab/${1:timeline}.csv}{}{%
  \time & \item
}$0
endsnippet
snippet timelin "myUltiSnips" b
\begin{table}
  \centering
  \caption{时间线}%
  \label{tab:时间线}
  \begin{tabular}
    {@{\,}r <{\hskip 2pt} !{\color{LightSteelBlue3}\makebox[0pt]{\textbullet}\hskip-0.5pt\vrule width 1pt\hspace{\labelsep}} >{\raggedright\arraybackslash}p{5cm}}
    $0
  \end{tabular}
\end{table}
endsnippet
#表格
snippet rule "myUltiSnips" b
\toprule$0
\midrule
${VISUAL}
\bottomrule
endsnippet
snippet diag "myUltiSnips" i
\diagbox[
  width = \linewidth,
  ${1:height=}]{$2}{$3}$0
endsnippet
snippet mulr "myUltiSnips" i
\multirow{${1:2}}{*}{${VISUAL}$2}$0
endsnippet
snippet mulc "myUltiSnips" i
\multicolumn{${1:2}}{c}{${VISUAL}$2}$0
endsnippet
#子表
snippet subt "myUltiSnips" b
\begin{subtable}[htbp]{0.45\linewidth}
  \centering
  \caption{$1}%
  \label{tab:$1}
  $2
\end{subtable}
${0:\quad}
endsnippet
# 1}}} table #

# picture {{{1 #
snippet subfig "myUltiSnips" b
\begin{subfigure}[htbp]{${1:0.45}\linewidth}
  \centering
  \includegraphics[
  width = \linewidth,
  ]{$2}
  \caption{${3:$2}}%
  \label{fig:$3}
\end{subfigure}
${0:\quad}
endsnippet
snippet pdf "myUltiSnips" b
\includepdf[scale=1,pages={${1:1-2}}]{${2:data}}
$0
endsnippet
snippet isbn "myUltiSnips" b
\EANisbn[SC5a, ISBN = ${1:9787121314704}]
$0
endsnippet
snippet wrap "myUltiSnips" b
\begin{wrapfigure}{${1:r}}{${2:0.2}\linewidth}
  \vspace{-10pt}
  \centering
  ${VISUAL}\includegraphics[
  width = \linewidth,
  ]{$3}
  \caption{${4:$3}}%
  \label{$4}
  \vspace{-10pt}
\end{wrapfigure}
$0
endsnippet
#子图
snippet ov "myUltiSnips" b
\begin{overpic}[
  width = \linewidth,
  ]{$1}
  put$0
\end{overpic}
endsnippet
endsnippet
#circuitikz
snippet circuit "myUltiSnips" b
\begin{circuitikz}
draw$1
\end{circuitikz}$0
endsnippet
#tikz
snippet node "myUltiSnips" b
\node($1) [$2] {$4};
node$0
endsnippet
snippet draw "myUltiSnips" b
\draw()$2;
draw$0
endsnippet
snippet .. "myUltiSnips" i
.. controls ($1) and ($2) .. ($0)
endsnippet
snippet cir "myUltiSnips" i
circle (${0:10pt})
endsnippet
snippet ell "myUltiSnips" i
ellipse ($1 and $0)
endsnippet
snippet rect "myUltiSnips" i
rectangle ($0)
endsnippet
snippet drawgrid "myUltiSnips" b
\draw[step=$1, gray, very thin] ($2) grid ($3);
$0
endsnippet
snippet arc "myUltiSnips" i
arc ($1:$2:$3)$0
endsnippet
# 1}}} picture #

# formula {{{1 #
#文字符号
snippet subn "myUltiSnips" b
\begin{subnumcases}{$1}%
\label{eq:$2}
$3 & $4\\\\
$5 & $6
\end{subnumcases}

$0
endsnippet
snippet zi "myUltiSnips" i
\zihao{${1:4}}$0
endsnippet
#证明
snippet theo "myUltiSnips" b
\begin{theorem}[$1]
$2
\end{theorem}

$0
endsnippet
snippet proof "myUltiSnips" b
\begin{proof}[$1]
$2
\end{proof}

$0
endsnippet
# 1}}} formula #

# code {{{1 #
#代码宏包
snippet ver "myUltiSnips" i
\verb|$1|$0
endsnippet
snippet dec "myUltiSnips" b
\DeclareMathOperator{\\$1}{$1}
$0
endsnippet
snippet stack "myUltiSnips" i
\stackrel{$1}{$2}$0
endsnippet
snippet lang "myUltiSnips" b
\lang${1:C}${1/(C)$|(P)$|(.*)/(?1:V)(?2:y)/}file{$2}{lst/$2}

$0
endsnippet
snippet file "myUltiSnips" b
\begin{filecontents}{${1:main}.${2:b}${2/(b)$|(c)$|(.*)/(?1:ib)(?2:sv)/}}
$1
\end{filecontents}

$0
endsnippet
# 1}}} code #

# reference {{{1 #
# label {{{2 #
snippet "mint(ed)?( (\S+))?" "myUltiSnips" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL}}
\end{minted}
\caption{$3}%
\label{lst:$3}
\end{listing}

$0
endsnippet
snippet tab "myUltiSnips" b
\begin{table}[${1:htbp}]
\centering
\caption{$2}%
\label{tab:$2}
csvau$3
\end{table}

$0
endsnippet
snippet fig "myUltiSnips" b
\begin{figure}[${2:htbp}]
  \centering
  \includegraphics[
    width = ${3:0.8}\linewidth,
  ]{$4}
  \caption{$5}%
  \label{fig:$4}
\end{figure}

$0
endsnippet
# 2}}} label #
# ref {{{2 #
snippet eqr "myUltiSnips" i
\eqref{$1}$0
endsnippet
snippet refa "myUltiSnips" i
\refAnswer{$1}$0
endsnippet
# 2}}} ref #
# 1}}} reference #

# debug {{{1 #
snippet atbeg "myUltiSnips" b
% Fakesubsection 条件编译
\usepackage{atbegshi}
$0
endsnippet
snippet showkey "myUltiSnips" b
\usepackage[notref,notcite]{showkeys}$0
endsnippet
snippet syn "myUltiSnips" b
\usepackage{syntonly}
\syntaxonly
$0
endsnippet
snippet draft "myUltiSnips" b
\usepackage[timestamp,first]{draftcopy}
\draftcopyVersion{Version ${1:1.0.0}}$0
endsnippet
snippet show "myUltiSnips" b
\showthe\baselineskip$0
endsnippet
# 1}}} debug #

# style {{{1 #
#行距
snippet spa "myUltiSnips" b
\begin{spacing}{${1:1}}
${VISUAL}$0
\end{spacing}
endsnippet
snippet flush "myUltiSnips" b
\begin{flushright}
${VISUAL}${1:日期：}
\end{flushright}

$0
endsnippet
snippet makebox "myUltiSnips" i
\makebox[${1:12}\ccwd][${2:c}]{$3}$0
endsnippet
#页面
snippet geo "myUltiSnips" b
\newgeometry{${1:l}${1/(l)$|(r)$|(t)$|(b)$|(h)$|(f)$|(.*)/(?1:eft)(?2:ight)(?3:op)(?4:ottom)(?5:ead)(?6:oot)/}=${2:2}cm}

${VISUAL}$3

\restoregeometry

$0
endsnippet
snippet chngpage "myUltiSnips" b
\changetext{正文高度}{正文宽度}{偶数页左边空}{奇数页左边空}{栏距}
$0
endsnippet
snippet label "myUltiSnips" b
\usepackage{labels}
\LabelGridtrue
$0
endsnippet
snippet labelfile "myUltiSnips" b
\sf\labelfile{$1.csv}$0
endsnippet
# 颜色
snippet xdefcolor "myUltiSnips" b
\xdefinecolor{$1}{rgb}{$2,$3,$4}
$0
endsnippet
# 文本框
snippet boxed "myUltiSnips" b
\begin{boxedminipage}{${1:\linewidth}}
$2
\end{boxedminipage}

$0
endsnippet
#特殊符号输入
snippet string "myUltiSnips" b
\string"$1\string"$0
endsnippet
# exercise {{{2 #
snippet exe "myUltiSnips" b
\begin{Exercise}
${VISUAL}$1
\end{Exercise}

$0
endsnippet
snippet ans "myUltiSnips" b
\begin{Answer}
${VISUAL}$0
\end{Answer}
endsnippet
snippet pro "myUltiSnips" b
\begin{Problem}
${1:${VISUAL}}
\begin{answer}
$0
\end{answer}
\end{Problem}
endsnippet
# 2}}} exercise #
# 1}}} style #

# body {{{1 #
# 计数 {{{2 #
snippet subfp1 "myUltiSnips" b
\end{figure}

  \addtocounter{figure}{-1}
  \newcounter{subf}
  \begin{figure}[htpb]
  endsnippet
  snippet subfp2 "myUltiSnips" b
  \setcounter{subf}{\value{subfigure}}
  ${VISUAL}
  \setcounter{subfigure}{\value{subf}}

endsnippet
# 2}}} 计数 #
# 添加目录 {{{2 #
snippet fake "myUltiSnips" b
% Fake${1:s}${1/(c)$|(s)$|(su)$|(sub)$|(.*)/(?1:hapter)(?2:ection)(?3:bsection)(?4:subsection)/} $2
$0
endsnippet
snippet add "myUltiSnips" b
\addcontentsline{toc}{${1:s}${1/(s)$|(c)$|(.*)/(?1:ection)(?2:hapter)/}}{$2}

$0
endsnippet
snippet qu "myUltiSnips" b
\begin{quote}
  $0
\end{quote}
endsnippet
snippet quo "myUltiSnips" b
\begin{quotation}
  $0
\end{quotation}
endsnippet
# 2}}} 添加目录 #
# 1}}} body #

# latex-text-font {{{1 #
snippet ita "myUltiSnips" i
\textit{${1:${VISUAL:text}}}$0
endsnippet
snippet bf "myUltiSnips" i
\textbf{${1:${VISUAL}}}$0
endsnippet
snippet ul "myUltiSnips" i
\uline{${1:${VISUAL}}}$0
endsnippet
snippet sc "myUltiSnips" i
\textsc{${1:${VISUAL}}}$0
endsnippet
snippet sf "myUltiSnips" i
\textsf{${1:${VISUAL}}}$0
endsnippet
snippet rm "myUltiSnips" i
\textrm{${1:${VISUAL}}}$0
endsnippet
snippet tt "myUltiSnips" i
\texttt{${1:${VISUAL}}}$0
endsnippet
snippet tsub "myUltiSnips" i
\textsubscript{${1:${VISUAL}}}$0
endsnippet
snippet tsup "myUltiSnips" i
\textsuperscript{${1:${VISUAL}}}$0
endsnippet
# 1}}} latex-text-font #

global !p
texMathZones = [
  'texMathZone'+x for x in [
    'A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F',
    'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS',
    'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z'
  ]
]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
  synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
  try:
    first = next(
      i for i in reversed(synstackids)
      if i in texIgnoreMathZoneIds or i in texMathZoneIds
    )
    return first != ignore
  except StopIteration:
    return False
endglobal

context "math()"
snippet sum "myUltiSnips" i
\sum_{${1:i} = ${2:-\infty}}^${3:\infty} $0
endsnippet

# latex-math-font {{{1 #
context "math()"
snippet mf "myUltiSnips" i
\mathfrak{${1:${VISUAL}}}$0
endsnippet
context "math()"
snippet mc "myUltiSnips" i
\mathcal{${1:${VISUAL}}}$0
endsnippet
context "math()"
snippet ms "myUltiSnips" i
\mathscr{${1:${VISUAL}}}$0
endsnippet
# 1}}} latex-math-font #

# comment {{{1 #
snippet root "myUltiSnips" b
%! TEX root = ${1:../*.tex}
$0
endsnippet
snippet prog "myUltiSnips" i
%! TEX program = ${1:lualatex}
$0
endsnippet
# 1}}} comment #

# command {{{1 #
snippet lua "myUltiSnips" b
\directlua{dofile("${1:${VISUAL}}")}$0
endsnippet
snippet str "myUltiSnips" i
\string"${1:${VISUAL}}\string"$0
endsnippet
# 1}}} command #

# template {{{1 #
# preamble {{{2 #
snippet answer "myUltiSnips" b
\usepackage{answers}
\newtheorem{Problem}{Problem}${1:[chapter]}
\Newassociation{answer}{Answer}{Answer}$0
endsnippet
# 2}}} preamble #

# latex-math-python {{{1 #
snippet sympy "sympy block " w
sympy $1 endsympy$0
endsnippet

snippet 'sympy(.*)endsympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
					.replace('^', '**') \
					.replace('{', '(') \
			 .replace('}', ')') + ')')
`
endsnippet

snippet math "mathematica block" w
math $1 endmath$0
endsnippet

snippet 'math(.*)endmath' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet
# 1}}} latex-math-python #

# latex-math-function {{{1 #
snippet int "myUltiSnips" i
\int\nolimits_{${1:-\infty}}^${2:\infty} $0
endsnippet

snippet sum "myUltiSnips" i
\sum_{${1:i} = ${2:-\infty}}^${3:\infty} $0
endsnippet

snippet pro "myUltiSnips" i
\prod_{${1:i} = ${2:-\infty}}^${3:\infty} $0
endsnippet

snippet lef "myUltiSnips" i
\left${1:(}${3:${VISUAL}}\right${2:)}$0
endsnippet

snippet big "myUltiSnips" i
\bigl${1:(}${3:${VISUAL}}\bigr${2:)}$0
endsnippet

snippet Big "myUltiSnips" i
\Bigl${1:(}${3:${VISUAL}}\Bigr${2:)}$0
endsnippet

snippet bigg "myUltiSnips" i
\biggl${1:(}${3:${VISUAL}}\biggr${2:)}$0
endsnippet

snippet Bigg "myUltiSnips" i
\Biggl${1:(}${3:${VISUAL}}\Biggr${2:)}$0
endsnippet

snippet "([A-Za-z'])(\d)" "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet "([A-Za-z'])_(\d\d)" "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet "([A-Za-z'])_" "auto subscript2" wr
`!p snip.rv = match.group(1)`_{${1:${VISUAL}}}$0
endsnippet

snippet ^ "auto subscript2" w
^{${1:${VISUAL}}}$0
endsnippet

snippet '([A-Za-z])\^(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet

snippet sq "myUltiSnips" i
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet __ "myUltiSnips" iA
_\mathrm{${VISUAL}$1}$0
endsnippet

snippet lim "myUltiSnips" i
\lim_{${1:n} \to ${2:\infty}}$0
endsnippet

snippet fr "myUltiSnips" i
\frac{${VISUAL}$1}{$2}$0
endsnippet

snippet case "myUltiSnips" b
\begin{cases}
  $1
\end{cases}
$0
endsnippet

snippet ali "myUltiSnips" b
\begin{aligned}
  $1
\end{aligned}
$0
endsnippet

snippet dcase "myUltiSnips" b
\begin{dcases}
  $1
\end{dcases}
$0
endsnippet

# latex-math-font {{{1 #
snippet mb "myUltiSnips" i
\mathbb{${1:${VISUAL}}}$0
endsnippet

snippet mf "myUltiSnips" i
\mathfrak{${1:${VISUAL}}}$0
endsnippet

snippet mc "myUltiSnips" i
\mathcal{${1:${VISUAL}}}$0
endsnippet

snippet ms "myUltiSnips" i
\mathscr{${1:${VISUAL}}}$0
endsnippet

snippet mr "myUltiSnips" i
\mathrm{${1:${VISUAL}}}$0
endsnippet

snippet mo "myUltiSnips" i
\mathop{${1:${VISUAL}}}$0
endsnippet
# 1}}} latex-math-font #

# matrix {{{1 #

snippet mat "myUltiSnips" b
\begin{matrix}
$0
\end{matrix}
endsnippet

snippet bmat "myUltiSnips" b
\begin{bmatrix}
$0
\end{bmatrix}
endsnippet

snippet Bmat "myUltiSnips" b
\begin{Bmatrix}
$0
\end{Bmatrix}
endsnippet

snippet pmat "myUltiSnips" b
\begin{pmatrix}
$0
\end{pmatrix}
endsnippet

snippet vmat "myUltiSnips" b
\begin{vmatrix}
$0
\end{vmatrix}
endsnippet

snippet Vmat "myUltiSnips" b
\begin{Vmatrix}
$0
\end{Vmatrix}
endsnippet
# 1}}} matrix #

# latex-math-space {{{1 #
snippet "([^A-Za-z0-9\}\)\]']) - " "myUltiSnips" irA
`!p snip.rv = match.group(1)`-$0
endsnippet

snippet '(\s) & ' "myUltiSnips" irA
`!p snip.rv = match.group(1)`& $0
endsnippet

snippet '(\s) = ' "myUltiSnips" irA
`!p snip.rv = match.group(1)`= $0
endsnippet
# 1}}} latex-math-space #
