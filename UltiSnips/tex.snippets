priority -30

extends all

# table {{{1 #
global !p
def create_tabu(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabu}to${1:.5}\linewidth{@{}" + "X[c]".join(['$' + str(i + 2) for i in range(cols + 1)]) + "@{}}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(2 + i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"
		final_str += old_spacing + "\\end{tabu}$0"
		snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \n\\\\\\$"
	snip.expand_anon(final_str)

endglobal
#表格环境
#代码展开
pre_expand "create_tabu(snip)"
snippet "tb(\d+)x(\d+)" "myUltiSnips" r
endsnippet
pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet
snippet csvreader "myUltiSnips" b
\csvreader[
  head to column names,
  tabular=cc$1,
  table head=\toprule
  $2
  \midrule,
  table foot=\bottomrule
  late after line=\\\\
]{tab/$3.csv}{}{ \a&\b&\c&\d&\e&\f&\g&\h&\i&\j&\k&\l$3 }$0
endsnippet
snippet timeline "myUltiSnips" b
\csvreader[
  head to column names,
  tabular = @{\,}r <{\hskip 2pt} !{\color{blue}\makebox[0pt]{\textbullet}\hskip-0.5pt\vrule width 1pt\hspace{\labelsep}} >{\raggedright\arraybackslash}p{5cm},
]{tab/${1:timeline}.csv}{}{%
  \time & \item
}$0
endsnippet
snippet timelin "myUltiSnips" b
\begin{table}
  \centering
  \caption{时间线}%
  \label{tab:时间线}
  \begin{tabular}
    {@{\,}r <{\hskip 2pt} !{\color{LightSteelBlue3}\makebox[0pt]{\textbullet}\hskip-0.5pt\vrule width 1pt\hspace{\labelsep}} >{\raggedright\arraybackslash}p{5cm}}
    $0
  \end{tabular}
\end{table}
endsnippet
#表格
snippet rule "myUltiSnips" b
\toprule$0
\midrule
${VISUAL}
\bottomrule
endsnippet
snippet diag "myUltiSnips" i
\diagbox[
  width = \linewidth,
  ${1:height=}]{$2}{$3}$0
endsnippet
snippet mulr "myUltiSnips" i
\multirow{${1:2}}{*}{${VISUAL}$2}$0
endsnippet
snippet mulc "myUltiSnips" i
\multicolumn{${1:2}}{c}{${VISUAL}$2}$0
endsnippet
#子表
snippet subt "myUltiSnips" b
\begin{subtable}[htbp]{0.45\linewidth}
  \centering
  \caption{$1}%
  \label{tab:$1}
  \csvautobooktabular[respect percent]{tab/$2.csv}
\end{subtable}
${0:\quad}
endsnippet
# 1}}} table #

# picture {{{1 #
snippet subf "myUltiSnips" b
\begin{subfigure}[htbp]{${1:0.45}\linewidth}
  \centering
  \includegraphics[
    width = \linewidth,
  ]{$2}
  \caption{${3:$2}}%
  \label{fig:$2}
\end{subfigure}
\quad$0
endsnippet
snippet pdf "myUltiSnips" b
\includepdf[scale = 1, pages = {${1:1-2}}]{${2:data}}
$0
endsnippet
snippet isbn "myUltiSnips" b
\EANisbn[SC5a, ISBN = ${1:9787121314704}]
$0
endsnippet
snippet wrap "myUltiSnips" b
\begin{wrapfigure}{${1:r}}{${2:0.2}\linewidth}
  \vspace{-10pt}
  \centering
  ${VISUAL}\includegraphics[
  width = \linewidth,
  ]{$3}
  \caption{${4:$3}}%
  \label{$4}
  \vspace{-10pt}
\end{wrapfigure}
$0
endsnippet
#子图
snippet ov "myUltiSnips" b
\begin{overpic}[
  width = \linewidth,
  ]{$1}
  put$0
\end{overpic}
endsnippet
#tikz
snippet node "myUltiSnips" b
\node($1) [$2] {$4};
node$0
endsnippet
snippet draw "myUltiSnips" b
\draw()$2;
draw$0
endsnippet
snippet .. "myUltiSnips" i
.. controls ($1) and ($2) .. ($0)
endsnippet
snippet cir "myUltiSnips" i
circle (${0:10pt})
endsnippet
snippet ell "myUltiSnips" i
ellipse ($1 and $0)
endsnippet
snippet rect "myUltiSnips" i
rectangle ($0)
endsnippet
snippet drawgrid "myUltiSnips" b
\draw[step=$1, gray, very thin] ($2) grid ($3);
$0
endsnippet
snippet arc "myUltiSnips" i
arc ($1:$2:$3)$0
endsnippet
# 1}}} picture #

# formula {{{1 #
#文字符号
snippet subn "myUltiSnips" b
\begin{subnumcases}{$1}%
\label{eq:$2}
$3 & $4\\\\
$5 & $6
\end{subnumcases}

$0
endsnippet
# 1}}} formula #

# code {{{1 #
#代码宏包
snippet lang "myUltiSnips" b
\langCVfile[$1][lst:$2][$1]{$0}{lst/$2}
endsnippet
# 1}}} code #

# reference {{{1 #
# label {{{2 #
snippet "mint(ed)?( (\S+))?" "myUltiSnips" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL}}
\end{minted}
\caption{$3}%
\label{lst:$3}
\end{listing}

$0
endsnippet
snippet csv "myUltiSnips" b
\begin{table}[${1:htbp}]
  \centering
  \caption{$2}%
  \label{tab:$2}
  \csvautobooktabular[respect percent]{tab/$0.csv}
\end{table}
endsnippet
snippet fig "myUltiSnips" b
\begin{figure}[${1:htbp}]
  \centering
  \includegraphics[
    width = ${2:0.8}\linewidth,
  ]{$3}
  \caption{$0}%
  \label{fig:$3}
\end{figure}
endsnippet
# 2}}} label #
# 1}}} reference #

# debug {{{1 #
snippet draft "myUltiSnips" b
\usepackage[timestamp,first]{draftcopy}
\draftcopyVersion{Version ${1:1.0.0}}$0
endsnippet
# 1}}} debug #

# style {{{1 #
#页面
snippet geo "myUltiSnips" b
\newgeometry{$1 = ${2:2}cm}

${VISUAL}$0

\restoregeometry
endsnippet
# 颜色
snippet xdef "myUltiSnips" b
\xdefinecolor{$1}{rgb}{$2,$3,$4}
$0
endsnippet
# 1}}} style #

# body {{{1 #
# 计数 {{{2 #
snippet subfp1 "myUltiSnips" b
\end{figure}

  \addtocounter{figure}{-1}
  \newcounter{subf}
  \begin{figure}[htpb]
  endsnippet
  snippet subfp2 "myUltiSnips" b
  \setcounter{subf}{\value{subfigure}}
  ${VISUAL}
  \setcounter{subfigure}{\value{subf}}

endsnippet
# 2}}} 计数 #
# 1}}} body #

# command {{{1 #
snippet lua "myUltiSnips" b
\directlua{dofile("${1:${VISUAL}}")}$0
endsnippet
# 1}}} command #

# preamble {{{1 #
snippet answer "myUltiSnips" b
\usepackage{answers}
\newtheorem{Problem}{Problem}${1:[chapter]}
\Newassociation{answer}{Answer}{Answer}$0
endsnippet
# 1}}} preamble #

global !p
texMathZones = [
	'texMathZone'+x for x in [
		'A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G',
		'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V',
		'W', 'X', 'Y', 'Z'
	]
]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
			i for i in reversed(synstackids)
			if i in texIgnoreMathZoneIds or i in texMathZoneIds
		)
		return first != ignore
	except StopIteration:
		return False
endglobal

# latex-math-python {{{1 #
context "math()"
snippet sympy "sympy block " w
sympy $1 endsympy$0
endsnippet
context "math()"
snippet 'sympy(.*)endsympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
		      .replace('^', '**') \
		      .replace('{', '(') \
		   .replace('}', ')') + ')')
`
endsnippet
context "math()"
snippet math "mathematica block" w
math $1 endmath$0
endsnippet
context "math()"
snippet 'math(.*)endmath' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet
# 1}}} latex-math-python #

# latex-math-function {{{1 #
context "math()"
snippet lim "myUltiSnips" i
\lim_{${1:n} \to ${2:\infty}}$0
endsnippet
context "math()"
snippet int "myUltiSnips" i
\int\nolimits_{${1:-\infty}}^${2:\infty} $0
endsnippet
context "math()"
snippet sum "myUltiSnips" i
\sum_{${1:i} = ${2:-\infty}}^${3:\infty} $0
endsnippet
context "math()"
snippet pro "myUltiSnips" i
\prod_{${1:i} = ${2:-\infty}}^${3:\infty} $0
endsnippet
context "math()"
snippet "([A-Za-z'])(\d)" "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet
context "math()"
snippet "([A-Za-z'])_(\d\d)" "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
context "math()"
snippet "([A-Za-z'])_" "auto subscript2" wr
`!p snip.rv = match.group(1)`_{${1:${VISUAL}}}$0
endsnippet
context "math()"
snippet ^ "auto subscript2" w
^{${1:${VISUAL}}}$0
endsnippet
context "math()"
snippet '([A-Za-z])\^(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`}
endsnippet
context "math()"
snippet __ "myUltiSnips" iA
_\mathrm{${VISUAL}$1}$0
endsnippet
# 1}}} latex-math-function #

